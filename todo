REMINDER: accessTokens will expire in 120s, requiring relogins. Increase this time when you need it on the backend. 

[x] create static menu page
[x] create static home page
[x] create static signup page 
[x] create static login page  (modal)
[x] create static profile page
[x] lift useLoggedIN state up to the App component. it doesnt make sense for it to be the state of the navbar, or anything else. + it's required by every page!!! will have to use redux store or contextapi to make this state available to every child comp of App (child == page)
[x] set up routing between these
[x] extract breadcrumbs into app, dynamically populate them based on current route
[x] implement login
    [x] get jwt and store it in localStorage 
    [x] make a way to checkk from a component if user is logged in, then conditionally render items withini that component
        [x] make a custom hook which at the initial render of each page will check (query the server) whether the user is logged in, and then store that value in a state variable so we can decide whether to redirect or show certain stuff or not. use the API's /validate endpoint for this
        [x] if a user has a jwt, and it is not expired, consider him logged in
        [x] if no jwt, logged out
            [ ] if jwt but invalid, alert and log out
            - how will we find out if invalid? we wont; we'll access protected API routes, and if the authentication fails the server will inform us via response and we can take appropriate action
            [x] create a /validate route to check if user is logged in or not, if he is in response we get the logged in user. this is the only ACTUAL way to know if logged in or not, otherwise if we assume having jwt == logged in, we'd just have to be optimistic and deal with any errors WHEN the server responds with an error
            [x] on loading a page,, req to the validate route to check if a user is logged in or not, so we know what to display OR whether to redirect or not
    [x] after conditionally rendering profile page link to only logged in ones, in the profile page show the user's details
[ ] implement registration
[ ] implement logout
    - should delete jwt stored in localstorage
[ ] implement account deletion
[x] add images to menu items in backend
    - store them as riles, dont store imgs in the db. store img urls in the db
[x] populate menu items from api 

[ ] make a cartmenu component
    [x] clicking 'add' on menu items opens the cartmenu (as a modal) and adds 
    that item to it (w/ quantity 1)
    [x] replace the yourordercomponent with the cartmenu in the profile page
    [x] make a context to track the current order (items, quant etc)
    as global application state 
    [ ] in the cartmenu add an option to submit the order (POST /orders)
will have to create a context to track:
    yourorder
    yourordertablemodalopenstatus (bc cart can be opened from multiple pages in the app)
    

[ ] implement previous orders
    [ ] fetch all orders w/ status of "delivered/cancelled/pending" from the api 
    and show them 
    [ ] on pending orders show a cancel button
    [ ] on clicking cancel button, call the api to cancel the order. 
    if it respondes with an error, then TLE for cancellation so
    inform the customer that it cant be cancelled 
[ ] implement editing account details (name)

--- customer app complete -- 

-- additional func for employees vvv --- 
[ ] show dashboard to emps, mgrs, admins
[ ] emp can see pending orders 
[ ] emp can set status to delivered for pending orders, or to cancelled
[ ] can search for orders by a particular phone number 






